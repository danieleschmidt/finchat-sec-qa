# Terragon Quantum Financial Intelligence - Production Deployment
# Full production-ready stack with quantum-enhanced processing capabilities
# 
# Features:
# - Multi-tier quantum processing architecture
# - Auto-scaling with predictive load balancing
# - High-availability with circuit breakers
# - Comprehensive monitoring and alerting
# - Security hardening with JWT and TLS
# - Global CDN and caching optimization

version: '3.8'

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  quantum-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # Core Quantum Processing Services
  quantum-api-primary:
    build:
      context: ..
      dockerfile: docker/Dockerfile.quantum-api
    image: terragon/quantum-api:production
    container_name: quantum-api-primary
    restart: unless-stopped
    environment:
      - QUANTUM_MODE=hyperscale
      - REDIS_URL=redis://redis-cluster:6379
      - QUANTUM_DEPTH=8
      - MAX_NODES=50
      - ENABLE_GPU=true
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9090
    ports:
      - "8080:8080"
      - "9090:9090"
    volumes:
      - quantum-data:/data
    networks:
      - quantum-network
    depends_on:
      - redis-cluster
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  quantum-api-secondary:
    build:
      context: ..
      dockerfile: docker/Dockerfile.quantum-api
    image: terragon/quantum-api:production
    container_name: quantum-api-secondary
    restart: unless-stopped
    environment:
      - QUANTUM_MODE=hyperscale
      - REDIS_URL=redis://redis-cluster:6379
      - QUANTUM_DEPTH=8
      - MAX_NODES=50
      - ENABLE_GPU=true
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9091
    ports:
      - "8081:8080"
      - "9091:9090"
    volumes:
      - quantum-data:/data
    networks:
      - quantum-network
    depends_on:
      - redis-cluster
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Load Balancer
  quantum-lb:
    image: nginx:alpine
    container_name: quantum-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx-quantum.conf:/etc/nginx/nginx.conf:ro
      - ../certs:/etc/nginx/certs:ro
    networks:
      - quantum-network
    depends_on:
      - quantum-api-primary
      - quantum-api-secondary
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Distributed Cache
  redis-cluster:
    image: redis:7-alpine
    container_name: redis-cluster
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ../config/redis-quantum.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - quantum-network
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Web Interface  
  quantum-webapp:
    build:
      context: ..
      dockerfile: docker/Dockerfile.quantum-webapp
    image: terragon/quantum-webapp:production
    container_name: quantum-webapp
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://quantum-lb
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${FLASK_SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET_KEY}
    ports:
      - "5000:5000"
    networks:
      - quantum-network
    depends_on:
      - quantum-lb
      - redis-cluster

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ../config/prometheus-quantum.yml:/etc/prometheus/prometheus.yml:ro
      - ../config/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    networks:
      - quantum-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ../config/grafana-dashboards:/var/lib/grafana/dashboards:ro
      - ../config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - quantum-network
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ../config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - quantum-network
    depends_on:
      - prometheus

  # Background Processing
  quantum-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.quantum-worker
    image: terragon/quantum-worker:production
    container_name: quantum-worker
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis-cluster:6379
      - WORKER_CONCURRENCY=10
      - WORKER_LOG_LEVEL=INFO
      - QUANTUM_DEPTH=6
    volumes:
      - quantum-data:/data
    networks:
      - quantum-network
    depends_on:
      - redis-cluster
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Data Pipeline
  quantum-pipeline:
    build:
      context: ..
      dockerfile: docker/Dockerfile.quantum-pipeline
    image: terragon/quantum-pipeline:production
    container_name: quantum-pipeline
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis-cluster:6379
      - PIPELINE_SCHEDULE=*/5 * * * *  # Every 5 minutes
      - DATA_RETENTION_DAYS=30
    volumes:
      - quantum-data:/data
    networks:
      - quantum-network
    depends_on:
      - redis-cluster

  # Security Scanner
  quantum-security:
    build:
      context: ..
      dockerfile: docker/Dockerfile.quantum-security
    image: terragon/quantum-security:production
    container_name: quantum-security
    restart: unless-stopped
    environment:
      - SCAN_INTERVAL=3600  # 1 hour
      - SECURITY_LOG_LEVEL=WARNING
    volumes:
      - quantum-data:/data
    networks:
      - quantum-network
    depends_on:
      - quantum-api-primary

  # Log Aggregation
  fluentd:
    build:
      context: ..
      dockerfile: docker/Dockerfile.fluentd
    image: terragon/fluentd:production
    container_name: fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ../config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - /var/log:/var/log:ro
    networks:
      - quantum-network

  # Database (Optional - for persistent storage)
  quantum-db:
    image: postgres:15-alpine
    container_name: quantum-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=quantum_finance
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ../data/postgres:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - quantum-network
    deploy:
      resources:
        limits:
          memory: 2G

# Auto-scaling configuration (requires Docker Swarm or Kubernetes)
x-quantum-scaling: &quantum-scaling
  deploy:
    replicas: 2
    update_config:
      parallelism: 1
      delay: 30s
      failure_action: rollback
      monitor: 60s
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s
    placement:
      constraints:
        - node.role == worker
        - node.labels.quantum == true