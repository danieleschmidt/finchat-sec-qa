[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "finchat_sec_qa"
version = "1.4.9"
requires-python = ">=3.8"
dependencies = [
    "requests",
    "httpx",
    "scikit-learn",
    "numpy",
    "joblib",
    "vaderSentiment",
    "fastapi",
    "uvicorn",
    "flask",
    "prometheus_client",
    "cryptography",
]

[project.optional-dependencies]
voice = ["pyttsx3"]
dev = [
    "pre-commit",
    "black",
    "isort",
    "pylint",
    "mypy",
    "bandit",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-mock",
    "coverage[toml]",
    "tox"
]
performance = ["aiohttp", "pytest", "pytest-asyncio", "pytest-benchmark"]
sdk = ["httpx"]
testing = [
    "pytest",
    "pytest-cov", 
    "pytest-asyncio",
    "pytest-mock",
    "pytest-xdist",
    "pytest-benchmark",
    "coverage[toml]",
    "factory-boy",
    "freezegun"
]
security = [
    "bandit",
    "safety",
    "semgrep"
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-swagger-ui-tag"
]

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["finchat", "finchat_sec_qa"]

[project.scripts]
finchat = "finchat_sec_qa.cli:main"
finchat-server = "finchat_sec_qa.server:start_server"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "vaderSentiment.*",
    "pyttsx3.*",
    "joblib.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests"
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/conftest.py"]

[tool.ruff]
line-length = 88
target-version = "py38"
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "S",   # flake8-bandit
    "A",   # flake8-builtins
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "S101",   # assert in tests is ok
    "S608",   # hardcoded SQL string is ok
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "ARG", "FBT"]
"scripts/**/*" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["finchat_sec_qa", "finchat"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
