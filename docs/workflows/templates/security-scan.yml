# Comprehensive Security Scanning Pipeline
# Copy this file to .github/workflows/security-scan.yml

name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHONPATH: src
  SECURITY_SCAN_MODE: true

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep

      - name: Run Bandit SAST scan
        run: |
          bandit -r src/ -f json -o bandit-results.json || true
          bandit -r src/ -f sarif -o bandit-results.sarif || true
          bandit -r src/
        continue-on-error: true

      - name: Run Semgrep SAST scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/bandit
            p/owasp-top-ten
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Upload SAST results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif
        continue-on-error: true

      - name: Upload SAST artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sast-results
          path: |
            bandit-results.json
            bandit-results.sarif
            semgrep-results.sarif
          retention-days: 90

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e . safety pip-audit

      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-results.json || true
          safety check --output text --output safety-results.txt || true
          safety check
        continue-on-error: true

      - name: Run pip-audit scan
        run: |
          pip-audit --format=json --output=pip-audit-results.json || true
          pip-audit
        continue-on-error: true

      - name: Check for known security vulnerabilities
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: requirements.txt pyproject.toml
          format: sarif
          output: pip-audit.sarif
        continue-on-error: true

      - name: Upload dependency scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: pip-audit.sarif
        continue-on-error: true

      - name: Upload dependency artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-results.json
            safety-results.txt
            pip-audit-results.json
            pip-audit.sarif
          retention-days: 90

  # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-results.json
        continue-on-error: true

      - name: GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: secrets-scan-results
          path: |
            trufflehog-results.json
            gitleaks-report.json
          retention-days: 90

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container images
        run: |
          docker build -f docker/Dockerfile.api -t finchat-api:scan .
          docker build -f docker/Dockerfile.webapp -t finchat-webapp:scan .

      - name: Run Trivy vulnerability scanner on API image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'finchat-api:scan'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner on WebApp image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'finchat-webapp:scan'
          format: 'sarif'
          output: 'trivy-webapp-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-api-results.sarif
            trivy-webapp-results.sarif
            trivy-fs-results.sarif
        continue-on-error: true

      - name: Upload container scan artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-api-results.sarif
            trivy-webapp-results.sarif
            trivy-fs-results.sarif
          retention-days: 90

  # License compliance scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install license scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck

      - name: Generate license report
        run: |
          pip install -e .
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=csv --output-file=licenses.csv
          pip-licenses --format=html --output-file=licenses.html

      - name: Check license compatibility
        run: |
          licensecheck --zero --ignore-packages pip setuptools wheel
        continue-on-error: true

      - name: Upload license scan results
        uses: actions/upload-artifact@v3
        with:
          name: license-scan-results
          path: |
            licenses.json
            licenses.csv
            licenses.html
          retention-days: 90

  # SLSA provenance generation
  slsa-provenance:
    name: SLSA Provenance
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build packages
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
        with:
          base64-subjects: |
            ${{ hashFiles('dist/*') }}
          upload-assets: true

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Security report generation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, secrets-scan, container-scan, license-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Scan Type | Status |" >> security-summary.md
          echo "|-----------|--------|" >> security-summary.md
          echo "| SAST | ${{ needs.sast.result }} |" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
          echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> security-summary.md
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> security-summary.md
          echo "| License Scan | ${{ needs.license-scan.result }} |" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ -d "sast-results" ]; then
            echo "## SAST Findings" >> security-summary.md
            echo "See attached artifacts for detailed results." >> security-summary.md
            echo "" >> security-summary.md
          fi
          
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Notify security team on critical findings
        if: failure() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 Critical security findings detected in FinChat-SEC-QA
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Please review the security scan results immediately.

# Security scanning notes:
# 1. Configure required secrets for external security tools
# 2. Adjust scan frequency based on your security requirements
# 3. Review and tune security policies to reduce false positives
# 4. Ensure security team receives notifications for critical findings
# 5. Integrate with your security dashboard/SIEM if available