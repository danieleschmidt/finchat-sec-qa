# Enhanced CI Pipeline for FinChat-SEC-QA
# Copy this file to .github/workflows/ci.yml

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHONPATH: src
  FINCHAT_LOG_LEVEL: DEBUG
  FINCHAT_TEST_MODE: true

jobs:
  # Security and compliance checks
  security-checks:
    name: Security & Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-

      - name: Install security dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[security]

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt
        continue-on-error: true

      - name: Run Safety dependency check
        run: |
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true

      - name: Secrets detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-quality-
            ${{ runner.os }}-pip-

      - name: Install development dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Check code formatting
        run: |
          ruff format --check src/ tests/
          echo "✅ Code formatting check passed"

      - name: Run linting
        run: |
          ruff check src/ tests/
          echo "✅ Linting check passed"

      - name: Type checking
        run: |
          mypy src/
          echo "✅ Type checking passed"

      - name: Check import sorting
        run: |
          isort --check-only src/ tests/
          echo "✅ Import sorting check passed"

  # Matrix testing across Python versions
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.python-version }}-pip-
            ${{ matrix.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[testing]

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        run: |
          pytest tests/ -m "not slow" -v --tb=short \
            --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Performance and load testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[performance]

      - name: Start application
        run: |
          python -m finchat_sec_qa.server &
          sleep 30  # Wait for startup
        env:
          FINCHAT_PORT: 8000
          FINCHAT_REDIS_URL: redis://localhost:6379/0

      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run smoke tests
        run: |
          cd tests/performance/k6
          k6 run smoke-test.js
        env:
          BASE_URL: http://localhost:8000

      - name: Run load tests
        run: |
          cd tests/performance/k6
          k6 run load-test.js
        env:
          BASE_URL: http://localhost:8000

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: tests/performance/k6/results/
          retention-days: 30

  # Docker build and security scanning
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: false
          tags: finchat-sec-qa-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build WebApp image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.webapp
          push: false
          tags: finchat-sec-qa-webapp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'finchat-sec-qa-api:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation checks
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[docs]

      - name: Check documentation links
        run: |
          # Check for broken links in markdown files
          find . -name "*.md" -exec grep -l "http" {} \; | head -10
          echo "✅ Documentation link check completed"

      - name: Build documentation
        run: |
          if [ -d "docs" ] && [ -f "mkdocs.yml" ]; then
            mkdocs build --strict
            echo "✅ Documentation built successfully"
          else
            echo "⚠️ No MkDocs configuration found, skipping documentation build"
          fi

  # SLSA provenance and SBOM generation
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom

      - name: Generate SBOM
        run: |
          cyclonedx-py -o sbom.json
          cyclonedx-py -o sbom.xml --format xml

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: |
            sbom.json
            sbom.xml
          retention-days: 90

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [security-checks, code-quality, test, performance, docker, documentation, supply-chain]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.security-checks.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.docker.result }}" != "success" ] || \
             [ "${{ needs.documentation.result }}" != "success" ] || \
             [ "${{ needs.supply-chain.result }}" != "success" ]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          else
            echo "✅ All CI jobs passed successfully"
          fi

      - name: Notify on failure
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

# Workflow configuration notes:
# 1. Set up required secrets in repository settings
# 2. Adjust matrix strategy based on your needs
# 3. Configure branch protection rules to require this workflow
# 4. Monitor workflow execution times and optimize as needed
# 5. Review and update security scanning configurations regularly