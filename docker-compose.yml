version: '3.8'

# FinChat SEC QA - Local Development Environment
# This docker-compose setup provides a complete local development stack
# with both FastAPI server and Flask webapp services.

services:
  # FastAPI Server Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      # API Server Configuration
      - FINCHAT_HOST=0.0.0.0
      - FINCHAT_PORT=8000
      - FINCHAT_LOG_LEVEL=INFO
      
      # Rate Limiting Configuration
      - FINCHAT_RATE_LIMIT_MAX_REQUESTS=100
      - FINCHAT_RATE_LIMIT_WINDOW_SECONDS=3600
      
      # Authentication Configuration
      - FINCHAT_MIN_TOKEN_LENGTH=16
      - FINCHAT_FAILED_ATTEMPTS_LOCKOUT_THRESHOLD=3
      - FINCHAT_LOCKOUT_DURATION_SECONDS=3600
      
      # Validation Limits
      - FINCHAT_MAX_QUESTION_LENGTH=1000
      - FINCHAT_MAX_TICKER_LENGTH=5
      
    volumes:
      # Mount cache directory for persistent storage
      - finchat_cache:/app/.cache/finchat_sec_qa
      # Mount source code for development (optional, uncomment for dev)
      # - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - finchat_network

  # Flask WebApp Service  
  webapp:
    build:
      context: .
      dockerfile: docker/Dockerfile.webapp
    ports:
      - "5000:5000"
    environment:
      # WebApp Configuration
      - FINCHAT_WEBAPP_HOST=0.0.0.0
      - FINCHAT_WEBAPP_PORT=5000
      - FINCHAT_LOG_LEVEL=INFO
      - FLASK_ENV=production
      
      # Same configuration as API for consistency
      - FINCHAT_RATE_LIMIT_MAX_REQUESTS=100
      - FINCHAT_RATE_LIMIT_WINDOW_SECONDS=3600
      - FINCHAT_MIN_TOKEN_LENGTH=16
      - FINCHAT_FAILED_ATTEMPTS_LOCKOUT_THRESHOLD=3
      - FINCHAT_LOCKOUT_DURATION_SECONDS=3600
      - FINCHAT_MAX_QUESTION_LENGTH=1000
      - FINCHAT_MAX_TICKER_LENGTH=5
      
    volumes:
      # Share cache directory with API service
      - finchat_cache:/app/.cache/finchat_sec_qa
      # Mount source code for development (optional, uncomment for dev)
      # - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - finchat_network
    depends_on:
      - api

  # Prometheus for monitoring (optional, can be enabled for observability)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - finchat_network
    profiles:
      - monitoring
    restart: unless-stopped

# Named volumes for persistent data
volumes:
  finchat_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/.docker_cache/finchat_sec_qa

# Custom network for service communication
networks:
  finchat_network:
    driver: bridge

# Development override configuration
# To use development mode:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up